name: Terraform
on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: string
        required: true
      mode:
        type: string
        description: 'Terraform destroy, plan, plan-destroy or apply'
      workflow:
        type: string
        description: 'Terraform workflow to run'
      tf-state-name:
        type: string
        description: 'Terraform state file name'
      vars-file:
        type: string
        description: 'Terraform vars file'
      publish-plan-on-pr:
        type: boolean
        description: 'Publish plan to PR'
        default: false

env:
  TERRAFORM_LOCK_TIMEOUT: ${{ vars.TERRAFORM_LOCK_TIMEOUT || '20m' }}
  working-directory: "${{ inputs.workflow }}"
  TERRAFORM_VERSION: "1.7.3"
  TERRAFORM_WRAPPER: false

jobs:
  Terraform-Plan:
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment }}"
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
      workflow: ${{ steps.plan.outputs.workflow }}
    steps:
      - run: echo "üéâ The job was triggered by a ${{ github.event_name }} event on environment ${{inputs.environment}} "
      - run: echo "üêß This job is now running on a ${{ runner.os }}"
      - run: echo "üîé Branch is ${{ github.ref }} and your repository is ${{ github.repository }}."  
      - run: echo "${{ toJson(vars) }}"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: ${{ env.TERRAFORM_WRAPPER }}

      - run: terraform --version

      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
        env:
          #Open id connect, se utiliza para conectarse (Service principal)
          ARM_USE_OIDC: true

      - name: Setup Terraform variables
        working-directory: ${{ env.working-directory }}
        id: vars
        run: |-
          cat > global.auto.tfvars << EOF
          location = "${{ vars.AZURE_LOCATION }}"
          env_name = "${{ vars.ENV_NAME }}"
          env_prefix = "${{ vars.ENV_PREFIX }}"
          user_name = "${{ vars.USER_NAME }}"
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azure_subscription_id_global = "${{ secrets.AZURE_SUBSCRIPTION_ID_GLOBAL }}"
          EOF

          echo "${{ inputs.vars-file }}" > vars-file.auto.tfvars
          # Replaces *** with " in the vars-file.auto.tfvars

          sed -i 's/\*\*\*/"/g' vars-file.auto.tfvars
          terraform fmt vars-file.auto.tfvars
          terraform fmt global.auto.tfvars

      - name: Verify vars
        run: cat *.auto.tfvars
        working-directory: ${{ env.working-directory }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -diff
        working-directory: ${{ env.working-directory }}

      - name: Terraform Init
        run: | 
          terraform init -backend-config="subscription_id=${{ vars.TF_STATE_SUB }}" -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" -backend-config="key=${{ inputs.tf-state-name }}" -backend-config="use_azuread_auth=true" -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        working-directory: ${{ env.working-directory }}

      - name: Terraform Validate
        id: validate
        if: ${{ inputs.mode == 'validate' || inputs.mode == 'plan' || inputs.mode == 'plan-destroy' || inputs.mode == 'apply' || inputs.mode == 'destroy' }}
        run: |
          echo "tf_output=$(terraform validate -no-color)" >> $GITHUB_OUTPUT
        shell: bash
        working-directory: ${{ env.working-directory }}

      - name: Terraform Plan
        id: plan
        if: ${{ inputs.mode == 'plan' || inputs.mode == 'plan-destroy' ||  inputs.mode == 'apply' || inputs.mode == 'destroy' }}
        run: |
          set +e
          set -o pipefail
          export exitcode=0
          if [ ${{ inputs.mode }} == 'apply' ] || [ ${{ inputs.mode }} == 'plan' ]; then
            terraform plan \
              -var="azure_subscription_id_global=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }} \
              -input=false \
              -no-color \
              -detailed-exitcode \
              -out=tfplan | tee terraform-plan.txt; export exitcode=$?
          else
            terraform plan \
              -var="azure_subscription_id_global=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }} \
              -input=false \
              -destroy \
              -no-color \
              -detailed-exitcode \
              -out=tfplan | tee terraform-plan.txt; export exitcode=$?
          fi
          echo "exitcode=$exitcode"
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          # TODO: Check with the working directory
          echo "workflow=$(basename ${{ env.working-directory }})" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

        continue-on-error: true
        shell: bash
        working-directory: ${{ env.working-directory }}

      - name: Archive Plan Output
        id: archive-plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.plan.outputs.workflow }}
          path: |
            ${{ env.working-directory }}/tfplan
            ${{ env.working-directory }}/terraform-plan.txt
      - name: Publish Terraform Plan to Task Summary
        run: |
          echo '#### Terraform Plan Output' >> $GITHUB_STEP_SUMMARY
          echo '[Click Here](${{ steps.archive-plan.outputs.artifact-url }})' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
      - name: Install fs module
        if: ${{ inputs.mode == 'plan' && inputs.publish-plan-on-pr }}    
        run: npm install fs
      - name: Comment on PR
        if: ${{ inputs.mode == 'plan' && inputs.publish-plan-on-pr }}        
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { readFileSync } = require('fs')
            const data = readFileSync('${{ env.working-directory }}/terraform-plan.txt', 'utf8')
            const plan = data.length > 65000 ? '[Click Here](${{ steps.archive-plan.outputs.artifact-url }})' : `<details><summary>Plan Output</summary>\n\n\`\`\`\n${data}\`\`\`\n\n</details>`

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform ${{ env.working-directory }}')
            })
            if(botComment && botComment.length > 0) {
              console.log("Bot comment found for Terraform ${{ env.working-directory }}");
              console.log(`Bot coment body: ${bootComment[0].body}`)
            }else {
              console.log("Bot comment for Terraform ${{ env.working-directory }} not found");
            }

            // 2. Prepare format of the comment
            const output = `Terraform ${{ env.working-directory }}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.tf_output }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            ${plan}

            *Pusher: @${{ github.actor }}, Working Directory: \`${{ env.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment && botComment.length > 0) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment[0].id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Error on Failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1
  
  #Approve:
   # environment: "${{ inputs.environment }}_approvers"
   # runs-on: ubuntu-latest
   # needs: Terraform-Plan
   # if: ${{ needs.Terraform-Plan.outputs.exitcode == 2 && (inputs.mode == 'apply' || inputs.mode == 'destroy') }}
   # steps:
    #  - name: Approved Message
     #   run: |
      #    echo "Terraform plan has been approved. Proceeding with apply."


  Terraform-Apply:
    runs-on: ubuntu-latest
    needs: [Terraform-Plan]
    #needs: [Terraform-Plan, Approve]
    environment: "${{ inputs.environment }}"
    # Exit codes:
    # 0: Success (With no diff) ---> No terraform changes
    # 1: Error
    # 2: Success (With diff) ---> Terraform changes
    if: ${{ (inputs.mode == 'apply' || inputs.mode == 'destroy') }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: ${{ env.TERRAFORM_WRAPPER }}

      - run: terraform --version
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
        env:
          ARM_USE_OIDC: true
    

      - name: Terraform Init
        run: | 
          terraform init -backend-config="subscription_id=${{ vars.TF_STATE_SUB }}" -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" -backend-config="key=${{ vars.TF_STATE_NAME }}" -backend-config="use_azuread_auth=true" -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        working-directory: ${{ env.working-directory }}

      - name: Download terraform plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.Terraform-Plan.outputs.workflow }}
          path: ${{ env.working-directory }}

      - name: Terraform Apply
        #run: terraform apply -no-color tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform -chdir=azure/workflows/common ${{ github.event.inputs.terraform_mode }} -auto-approve -var="azure_subscription_id_global=${{secrets.AZURE_SUBSCRIPTION_ID}}"
        working-directory: ${{ env.working-directory }}
        
